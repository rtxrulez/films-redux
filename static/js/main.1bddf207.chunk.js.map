{"version":3,"sources":["EpisodItem/EpisodItem.js","store/actions/fetchFilms/fetchFilmsActions.js","store/actions/fetchFilms/fetchFilmsType.js","Episods/Episods.js","App/App.js","serviceWorker.js","store/reducers/episods.js","store/reducers/settings.js","store/reducers/rootReducer.js","store/middlewares/sorting.js","store/store.js","index.js"],"names":["EpisodItem","this","props","item","name","pathImg","desc","date","className","src","alt","dangerouslySetInnerHTML","__html","Component","nameSort","type","replaceFilms","payload","Episods","handleNameSort","handleDateSort","dateSort","filmsRequest","episods","episodList","isFetching","isFetched","error","EpisodsDom","map","v","k","key","onClick","toString","mapDispatchToProps","connect","store","Boolean","window","location","hostname","match","initialState","openPage","combineReducers","state","action","console","log","settings","createStore","rootReducer","undefined","compose","applyMiddleware","next","fetch","method","mode","then","response","json","films","newArr","path","image","airdate","summary","dispatch","catch","filmsFilure","getState","sort","a","b","nameA","toLowerCase","nameB","dateA","Date","dateB","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","f","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bddf207.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\nimport \"./EpisodItem.scss\";\n\nclass EpisodItem extends Component {\n  render() {\n    const { name, pathImg, desc, date } = this.props.item;\n    return (\n      <div className=\"EpisodItem\">\n        <div className=\"EpisodItem__photo\">\n          <img src={pathImg} alt={name} />\n        </div>\n        <div className=\"EpisodItem__content\">\n          <h3 className=\"EpisodItem__name\">{name}</h3>\n          <div\n            dangerouslySetInnerHTML={{ __html: desc }}\n            className=\"EpisodItem__desc\"\n          />\n          <div className=\"EpisodItem__date\">{date}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nEpisodItem.propTypes = {\n  item: propTypes.object.isRequired\n};\n\nexport default EpisodItem;\n","import {\n  FILMS_REQUEST,\n  FILMS_SUCCESS,\n  FILMS_FAILURE,\n  NAME_SORT,\n  DATE_SORT,\n  REPLACE_FILMS\n} from \"./fetchFilmsType\";\n\nexport const filmsRequest = () => {\n  return {\n    type: FILMS_REQUEST\n  };\n};\n\nexport const filmsSuccess = payload => {\n  return {\n    type: FILMS_SUCCESS,\n    payload\n  };\n};\n\nexport const filmsFilure = error => {\n  return {\n    type: FILMS_FAILURE,\n    error\n  };\n};\n\nexport const nameSort = () => {\n  return {\n    type: NAME_SORT\n  };\n};\n\nexport const dateSort = () => {\n  return {\n    type: DATE_SORT\n  };\n};\n\nexport const replaceFilms = payload => {\n  return {\n    type: REPLACE_FILMS,\n    payload\n  };\n};\n","// export const FETCH_EVENTS_REQUEST = \"FETCH_EVENTS_REQUEST\"\n// export const FETCH_EVENTS_SUCCESS = \"FETCH_EVENTS_SUCCESS\"\n// export const FETCH_EVENTS_FAILURE = \"FETCH_EVENTS_FAILURE\"\n\nexport const FILMS_REQUEST = \"FILMS_REQUEST\";\nexport const FILMS_SUCCESS = \"FILMS_SUCCESS\";\nexport const FILMS_FAILURE = \"FILMS_FAILURE\";\nexport const NAME_SORT = \"NAME_SORT\";\nexport const DATE_SORT = \"DATE_SORT\";\nexport const REPLACE_FILMS = \"REPLACE_FILMS\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Episods.scss\";\nimport EpisodItem from \"../EpisodItem/EpisodItem\";\nimport {\n  filmsRequest,\n  nameSort,\n  dateSort\n} from \"../store/actions/fetchFilms/fetchFilmsActions\";\n\nclass Episods extends Component {\n  componentDidMount() {\n    this.props.filmsRequest();\n  }\n\n  handleNameSort = () => {\n    const { nameSort } = this.props;\n    nameSort();\n  };\n\n  handleDateSort = () => {\n    const { dateSort } = this.props;\n    dateSort();\n  };\n\n  render() {\n    const {\n      episodList,\n      isFetching,\n      isFetched,\n      error,\n      nameSort,\n      dateSort\n    } = this.props.episods;\n\n    const EpisodsDom = episodList.map((v, k) => {\n      return <EpisodItem item={v} key={v.name + v.date} />;\n    });\n\n    return (\n      <div className=\"episods\">\n        <div className=\"episods__header\">\n          <div className=\"episods__filter\">\n            <button onClick={this.handleNameSort}>\n              Название\n              {nameSort && !dateSort ? (nameSort === \"up\" ? \"⇑\" : \"⇓\") : \"\"}\n            </button>\n            <button onClick={this.handleDateSort}>\n              Дата{\" \"}\n              {dateSort && !nameSort ? (dateSort === \"up\" ? \"⇑\" : \"⇓\") : \"\"}\n            </button>\n          </div>\n          {isFetching ? <div>Загрузка...</div> : null}\n          {isFetched ? <div>Загрузка завершена!</div> : null}\n          {error ? <div>Ошибка загрузки {error.toString()}</div> : null}\n        </div>\n        <div className=\"episods__list\">{EpisodsDom}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    episods: store.episods\n  };\n};\n\nconst mapDispatchToProps = {\n  filmsRequest: filmsRequest,\n  nameSort: nameSort,\n  dateSort: dateSort\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Episods);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.scss\";\nimport Episods from \"../Episods/Episods\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Список фильмов</h1>\n      </header>\n      <section className=\"content\">\n        <Episods></Episods>\n      </section>\n    </div>\n  );\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FILMS_REQUEST,\n  FILMS_SUCCESS,\n  FILMS_FAILURE,\n  NAME_SORT,\n  DATE_SORT,\n  REPLACE_FILMS\n} from \"../actions/fetchFilms/fetchFilmsType\";\n\nexport const initialState = {\n  isFetching: false,\n  isFetched: false,\n  error: null,\n  nameSort: \"up\", // \"down\" or \"up\"\n  dateSort: false, // \"down\" or \"up\"\n  episodList: [\n    // {\n    //   name: \"Название\",\n    //   pathImg:\n    //       \"http://static.tvmaze.com/uploads/images/medium_landscape/1/4394.jpg\",\n    //   desc: \"Описание\",\n    //   date: \"7\"\n    // }\n  ]\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FILMS_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n        isFetched: false\n      };\n\n    case FILMS_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        isFetched: true,\n        episodList: [...action.payload]\n      };\n\n    case FILMS_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        isFetched: true,\n        error: action.error\n      };\n\n    case NAME_SORT:\n      return {\n        ...state,\n        dateSort: false,\n        nameSort: state.nameSort\n          ? state.nameSort === \"down\"\n            ? \"up\"\n            : \"down\"\n          : \"up\"\n      };\n\n    case DATE_SORT:\n      return {\n        ...state,\n        nameSort: false,\n        dateSort: state.dateSort\n          ? state.dateSort === \"down\"\n            ? \"up\"\n            : \"down\"\n          : \"up\"\n      };\n\n    case REPLACE_FILMS:\n      console.log(\"aaaa\", action);\n      return {\n        ...state,\n        episodList: [...action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n","export const initialState = {\n  openPage: true\n};\n\nexport default (state = initialState) => {\n  return state;\n};\n","import { combineReducers } from \"redux\";\nimport episodsReducer from \"./episods\";\nimport settingsReducer from \"./settings\";\n\nexport default combineReducers({\n  episods: episodsReducer,\n  settings: settingsReducer\n});\n","import { DATE_SORT, NAME_SORT } from \"../actions/fetchFilms/fetchFilmsType\";\nimport { replaceFilms } from \"../actions/fetchFilms/fetchFilmsActions\";\n\nexport default store => next => action => {\n  const { nameSort, dateSort, episodList } = { ...store.getState().episods };\n\n  console.log(\"type\", action.type, nameSort, dateSort);\n  if (action.type === NAME_SORT) {\n    if (nameSort === \"down\") {\n      episodList.sort((a, b) => {\n        let nameA = a.name.toLowerCase();\n        let nameB = b.name.toLowerCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      store.dispatch(replaceFilms(episodList));\n    }\n    if (nameSort === \"up\") {\n      episodList.sort((a, b) => {\n        let nameA = a.name.toLowerCase();\n        let nameB = b.name.toLowerCase();\n        if (nameA > nameB) {\n          return -1;\n        }\n        if (nameA < nameB) {\n          return 1;\n        }\n        return 0;\n      });\n      store.dispatch(replaceFilms(episodList));\n    }\n  }\n\n  if (action.type === DATE_SORT) {\n    if (dateSort === \"down\") {\n      episodList.sort((a, b) => {\n        let dateA = new Date(a.date);\n        let dateB = new Date(b.date);\n        if (dateA < dateB) {\n          return -1;\n        }\n        if (dateA > dateB) {\n          return 1;\n        }\n        return 0;\n      });\n      store.dispatch(replaceFilms(episodList));\n    }\n    if (dateSort === \"up\") {\n      episodList.sort((a, b) => {\n        let dateA = new Date(a.date);\n        let dateB = new Date(b.date);\n        if (dateA > dateB) {\n          return -1;\n        }\n        if (dateA < dateB) {\n          return 1;\n        }\n        return 0;\n      });\n      store.dispatch(replaceFilms(episodList));\n    }\n  }\n\n  return next(action);\n};\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { FILMS_REQUEST } from \"./actions/fetchFilms/fetchFilmsType\";\nimport {\n  filmsSuccess,\n  filmsFilure,\n  nameSort\n} from \"./actions/fetchFilms/fetchFilmsActions\";\n\nimport sorting from \"./middlewares/sorting\";\n\nconst fetchFilms = store => next => action => {\n  if (action.type === FILMS_REQUEST) {\n    fetch(\"http://api.tvmaze.com/shows/1/episodes?specials=1\", {\n      method: \"GET\",\n      mode: \"cors\"\n    })\n      .then(response => {\n        return response.json();\n      })\n      .then(films => {\n        const newArr = films.map((v, k) => {\n          let path = \"\";\n          if (v.image !== null && \"medium\" in v.image) {\n            path = v.image[\"medium\"];\n          }\n          return {\n            name: v.name,\n            date: v.airdate,\n            desc: v.summary,\n            pathImg: path\n          };\n        });\n        store.dispatch(filmsSuccess(newArr));\n        store.dispatch(nameSort());\n      })\n      .catch(error => {\n        store.dispatch(filmsFilure(error));\n      });\n  }\n  next(action);\n};\n\nconst logger = store => next => action => {\n  console.log(\"logger: \", action.type);\n  return next(action);\n};\n\nexport default createStore(\n  rootReducer,\n  undefined,\n  compose(\n    applyMiddleware(fetchFilms, sorting, logger),\n    window.devToolsExtension ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\n  )\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App></App>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}